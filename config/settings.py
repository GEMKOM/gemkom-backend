"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv, find_dotenv
BASE_DIR = Path(__file__).resolve().parent.parent
# Load the nearest .env (explicit path avoids CWD issues on Windows)
load_dotenv(find_dotenv(str(BASE_DIR / ".env")), override=False)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z^bajcf(fei!$y9cny6pttc0+o&n981_@ur0(0af6390ionx-n'

JIRA_EMAIL = 'ocalik@gemkom.com.tr'
JIRA_API_TOKEN = os.getenv('JIRA_API_TOKEN')

JIRA_AUTOMATION_TOKEN = os.getenv('JIRA_AUTOMATION_TOKEN')

TELEGRAM_MAINTENANCE_BOT_TOKEN = os.getenv('TELEGRAM_MAINTENANCE_BOT_TOKEN')

CURRENCY_RATE_API_URL = "https://api.freecurrencyapi.com/v1/latest"
CURRENCY_FIXED_BASE = "TRY"  # keep it simple
FREECURRENCYAPI_KEY = os.getenv("FREECURRENCYAPI_KEY")

DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", "gemcore@gemkom.com.tr")
SERVER_EMAIL = DEFAULT_FROM_EMAIL  # for error mails

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.office365.com")
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", "587"))
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", "true").lower() == "true"

# Authenticate with YOUR licensed user (who has "Gönder Olarak / Send As" on noreply@...)
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")        # e.g. onat@yourcompany.com
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")  # that user's password (or app password)

QUEUE_SECRET = os.getenv("QUEUE_SECRET", "")


ALLOWED_HOSTS = ['gemkom-backend-716746493353.europe-west3.run.app',
                 '127.0.0.1', 'localhost']  # for now

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    "DEFAULT_PAGINATION_CLASS": "config.pagination.CustomPageNumberPagination",
    "PAGE_SIZE": 100,  # Adjust as needed
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'storages',
    'users',
    'core',
    'corsheaders',
    'machining.apps.MachiningConfig',
    'machines',
    'procurement',
    "approvals",
    'overtime',
    'tasks',
    'cnc_cutting',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # ✅ Put as high as possible
    'django.middleware.common.CommonMiddleware',  # ✅ Only once
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'core.middlewares.subdomain_restriction.SubdomainRestrictionMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "https://gemkom-dev.github.io",
    "https://gemkom.github.io",
    "https://gemcore.com.tr",
    "http://127.0.0.1:8080",
    "http://localhost:8080",
]

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https:\/\/.*\.gemcore\.com\.tr$",
]

from corsheaders.defaults import default_headers
CORS_ALLOW_HEADERS = list(default_headers) + [
    "x-subdomain",  # ✅ must be lowercase here
]

CSRF_TRUSTED_ORIGINS = ['https://gemkom-backend-716746493353.europe-west3.run.app']
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME'    : os.getenv('DB_NAME', 'postgres'),
        'USER'    : os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST'    : os.getenv('DB_HOST', ''),
        'PORT'    : os.getenv('DB_PORT', '5432'),
        'OPTIONS' : {
            'sslmode': os.getenv('DB_SSLMODE', 'require'),
        },
    }
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_TZ = True
TIME_ZONE = 'UTC'  # keep UTC in DB and as global default

# add an app-level default planning tz (custom setting)
APP_DEFAULT_TZ = 'Europe/Istanbul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Supabase Storage Configuration (S3-Compatible) ---

# Your Supabase Project ID is the subdomain in your endpoint URL.
SUPABASE_PROJECT_ID = os.environ.get('SUPABASE_PROJECT_ID')

# The name of the bucket you created in Supabase Storage (e.g., 'gemcore').
SUPABASE_BUCKET_NAME = os.environ.get('SUPABASE_BUCKET_NAME')

# Credentials are the same for all buckets in a Supabase project
AWS_S3_ACCESS_KEY_ID = os.environ.get('SUPABASE_S3_ACCESS_KEY_ID')
AWS_S3_SECRET_ACCESS_KEY = os.environ.get('SUPABASE_S3_SECRET_ACCESS_KEY')

# The S3-compatible endpoint for your Supabase project.
AWS_S3_ENDPOINT_URL = f'https://{SUPABASE_PROJECT_ID}.supabase.co/storage/v1/s3' # <-- Added /s3

# Set the default storage to your custom private storage class.
# Any FileField without a `storage` argument will use this.
DEFAULT_FILE_STORAGE = 'core.storages.PrivateMediaStorage'

AWS_QUERYSTRING_AUTH = True # This will generate expiring URLs for private files.

# --- Boto3/S3 Specific Configuration ---
# This is crucial for S3-compatible services like Supabase. It forces boto3
# to use path-style addressing (e.g., endpoint/bucket/key) instead of
# virtual-hosted-style addressing (e.g., bucket.endpoint/key).
AWS_S3_ADDRESSING_STYLE = 'path'

# Explicitly set the region. Boto3 requires this, even for S3-compatible
# providers. Find your region in Supabase Dashboard > Project Settings > Infrastructure.
# It will be something like 'eu-west-2', 'us-east-1', etc.
AWS_S3_REGION_NAME = os.environ.get('SUPABASE_REGION')
